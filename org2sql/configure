#!/usr/bin/perl

#
# Based on the configure script from Coccinelle
#

######################################################################
# Prelude
######################################################################

my $project =        "org2sql";
my $projectcmdline = "org2sql --parse_org <Org file> --to-sql --prefix <prefix>";

my $prefix="/usr/local";
my $opt=".opt";

local $_ = join ' ', @ARGV;

# Parse options
/-h/ || /--help/ and die "usage: $0 [--prefix=path] [--no-opt]\n\n\t--no-opt\tDo not use the optimimized version of OCaml\n\t--opt\t\tUse the optimimized version of OCaml\n\n";
/--prefix=([^ ]*)/ and $prefix = $1;
/--no-opt/ and $opt = "";
/--opt/ and $opt = ".opt";

######################################################################
# Side effects
######################################################################


######################################################################
# Helpers
######################################################################
#BEGIN { die "need Perl 5 or greater" if $] < 5 ; }

#use Common;
sub pr2 { print STDERR "@_\n" }
sub cat {
    my ($what) = @_;
    my @list;
    open(TMP, $what);
    while(<TMP>) { push @list, "$_"; }
    \@list;
}
sub notb   { !$_[0] }
sub mapf   { my ($f, $xs) = @_; [ map { &$f($_) } @{$xs} ] }
sub plural { my ($e) = @_; if ($e > 1) { "s" } else { "" } }

sub check_config { my ($command, $expect, $msggood, $msgbad) = @_;
    my $error = 0;

    my $full = cat($command);
    my $res = join(" ", @{$full});
#	       pr2 $res;
    if(notb($res =~ $expect)) { $error++; pr2 "!!!! $msgbad !!!!"; }
    else { pr2 $msggood }
    return $error;
}

######################################################################
# Let's go
######################################################################
pr2 "Checking your configuration.\n";

my $error = 0;

#---------------------------------------------------------------------
# Compilers and runtimes
#---------------------------------------------------------------------
$error +=
    check_config("ocamlc -version |",
		 "(3\.09|3\.1[0-9]|4\.[0-9]+)",
                 "OCaml (the wonderful language) is present.",
                 "The program ocaml is missing or is not a good version. We need at least 3.09",
                 );

if ($opt eq ".opt") {
   my $opt_check = `which ocamlc.opt 2> /dev/null`;
   if($opt_check =~ "/ocamlc.opt\$") {
	pr2 "ocamlc.opt is present.";
   }
   else {
   	$opt="";
	pr2 "ocamlc.opt not found";
   }

   my $opt_check = `which ocamlopt.opt 2> /dev/null`;
   if($opt_check =~ "/ocamlopt.opt\$") {
	pr2 "ocamlopt.opt is present.";
   }
   else {
   	$opt="";
	pr2 "ocamlopt.opt not found";
   }

   my $opt_check = `which ocamldep.opt 2> /dev/null`;
   if($opt_check =~ "/ocamldep.opt\$") {
	pr2 "ocamldep.opt is present.";
   }
   else {
   	$opt="";
	pr2 "ocamldep.opt not found";
   }

   my $opt_check = `which ocamllex.opt 2> /dev/null`;
   if($opt_check =~ "/ocamllex.opt\$") {
	pr2 "ocamllex.opt is present.";
   }
   else {
   	$opt="";
	pr2 "ocamllex.opt not found";
   }

   if($opt eq "") {
       pr2 "At least one native OCaml tool have not been found.";
       pr2 "Desactivation of all native OCaml tools for compilation.";
   }
}

#$error += # menhir is not mandatory anymore. Parsers are pre-generated.
    check_config("menhir --version |",
                 "menhir, version 20(2.|1.|0[89]).*",
#                 "menhir, version 2007.*",
#  TODO: Check with earlier version
                 "Menhir (the parser generator) is present.",
                 "The program menhir is missing or is not a good version.",
                 );


#---------------------------------------------------------------
# Developers tools
#---------------------------------------------------------------

pr2 "";

$error += check_config(
  "make -v 2>&1 |grep Make|",
  "GNU Make [^0-9]*(3\.[0-9]+.*|4\..*)", #version 3.79.1, 3.81, 4.x
  "make (gnu version) is present.",
  "The program gnu make is missing or is not a good version.
We need  3.XX",
);

######################################################################
# Generate globals files (features issues)
######################################################################

######################################################################
# Diagnostic
######################################################################


if($error) {
    pr2 "
----------------------------------------------------------------------
!!!! There seems to have problem, we have found $error missing package" .
plural($error) . ".
----------------------------------------------------------------------
";
} else {

    pr2 "

----------------------------------------------------------------------

All seems fine for $project.

To compile $project type one of the following commands:
  \$ make          (bytecode version)
  \$ make opt      (native version)
  \$ make world    (both versions)

To install type:
  \$ (sudo) make install

  \$ $projectcmdline

";


######################################################################
# Generating the configuration
######################################################################

pr2 "$project target prefix: $prefix (you can use --prefix to override it)";
pr2 "Generating Makefile.config";
open(CONFIG, ">Makefile.config");
print CONFIG "# autogenerated by configure

#
INSTALL_PROGRAM?=install -c -m 755
INSTALL_LIB?=    install -c -m 755
INSTALL_DATA?=   install -c -m 644

# Where to install the binary
BINDIR=$prefix/bin

# Where to install the man pages
MANDIR=$prefix/man

# Where to install the lib
LIBDIR=$prefix/lib

# Where to install the configuration files
SHAREDIR=$prefix/share/$project


PDFVIEWER?=xdg-open

# The OPTBIN variable is here to allow to use ocamlc.opt instead of
# ocaml, when it is available, which speeds up compilation. So
# if you want the fast version of the ocaml chain tools, set this var
# or setenv it to \".opt\" in your startup script.
OPTBIN=$opt
OPTFLAGS=

OCAMLYACCOPT=
#OCAMLYACCOPT=--table

";

}
