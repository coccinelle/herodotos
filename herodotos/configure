#!/usr/bin/perl

#
# Based on the configure script from Coccinelle
#

######################################################################
# Prelude
######################################################################

my $project =        "herodotos";
my $projectcmdline = "herodotos -c test.hc";

my $prefix="/usr/local";
my $opt=".opt";

local $_ = join ' ', @ARGV;

# Parse options
/-h/ || /--help/ and die "usage: $0 [--prefix=path] [--no-opt]\n\n\t--no-opt\tDo not use the optimimized version of OCaml\n\t--opt\t\tUse the optimimized version of OCaml\n\n";
/--prefix=([^ ]*)/ and $prefix = $1;
/--no-opt/ and $opt = "";
/--opt/ and $opt = ".opt";

######################################################################
# Side effects
######################################################################


######################################################################
# Helpers
######################################################################
#BEGIN { die "need Perl 5 or greater" if $] < 5 ; }

#use Common;
sub pr2 { print STDERR "@_\n" }
sub cat {
    my ($what) = @_;
    my @list;
    open(TMP, $what);
    while(<TMP>) { push @list, "$_"; }
    \@list;
}
sub notb   { !$_[0] }
sub mapf   { my ($f, $xs) = @_; [ map { &$f($_) } @{$xs} ] }
sub plural { my ($e) = @_; if ($e > 1) { "s" } else { "" } }

sub check_config { my ($command, $expect, $msggood, $msgbad) = @_;
    my $error = 0;

    my $full = cat($command);
    my $res = join(" ", @{$full});
#	       pr2 $res;
    if(notb($res =~ $expect)) { $error++; pr2 "!!!! $msgbad !!!!"; }
    else { pr2 $msggood }
    return $error;
}

######################################################################
# Let's go
######################################################################
pr2 "Checking your configuration.\n";

my $error = 0;

#---------------------------------------------------------------------
# Compilers and runtimes
#---------------------------------------------------------------------
$error +=
    check_config("dune --version |",
                 "(3\.15)",
                 "Dune is present.",
                 "The program dune is missing or is not a good version. We need at least 3.15",
                 );

$error +=
    check_config("ocamlc -version |",
                 "(3\.09|3\.1[0-9]|4\.[0-9]+|5\.[0-9]+)",
                 "OCaml (the wonderful language) is present.",
                 "The program ocaml is missing or is not a good version. We need at least 3.09",
                 );

if ($opt eq ".opt") {
   my $opt_check = `which ocamlc.opt 2> /dev/null`;
   if($opt_check =~ "/ocamlc.opt\$") {
	pr2 "ocamlc.opt is present.";
   }
   else {
   	$opt="";
	pr2 "ocamlc.opt not found";
   }

   my $opt_check = `which ocamlopt.opt 2> /dev/null`;
   if($opt_check =~ "/ocamlopt.opt\$") {
	pr2 "ocamlopt.opt is present.";
   }
   else {
   	$opt="";
	pr2 "ocamlopt.opt not found";
   }

   my $opt_check = `which ocamldep.opt 2> /dev/null`;
   if($opt_check =~ "/ocamldep.opt\$") {
	pr2 "ocamldep.opt is present.";
   }
   else {
   	$opt="";
	pr2 "ocamldep.opt not found";
   }

   my $opt_check = `which ocamllex.opt 2> /dev/null`;
   if($opt_check =~ "/ocamllex.opt\$") {
	pr2 "ocamllex.opt is present.";
   }
   else {
   	$opt="";
	pr2 "ocamllex.opt not found";
   }

   if($opt eq "") {
       pr2 "At least one native OCaml tool have not been found.";
       pr2 "Desactivation of all native OCaml tools for compilation.";
   }
}

#$error += # menhir is not mandatory anymore. Parsers are pre-generated.
    check_config("menhir --version |",
                 "menhir, version 20(0[89]|1[0-9]|2[0-4]).*",
#                 "menhir, version 2007.*",
#  TODO: Check with earlier version
                 "Menhir (the parser generator) is present.",
                 "The program menhir is missing or is not a good version.",
                 );

# Checking parmap lib
$error +=
    check_config("ocamlfind query parmap |",
                 "lib\/parmap\$",
                 "Parmap library is present.",
                 "The parmap library is missing.",
                 );


# Checking vlt lib
$error +=
    check_config("ocamlfind query vlt |",
                 "lib\/vlt\$",
                 "Vlt library is present.",
                 "The vlt library is missing.",
                 );


# Checking postgresql lib
$error +=
    check_config("ocamlfind query postgresql |",
                 "lib\/postgresql\$",
                 "Postgresql library is present.",
                 "The postgresql library is missing.",
                 );


#---------------------------------------------------------------
# Developers tools
#---------------------------------------------------------------

pr2 "";

$error += check_config(
  "make -v 2>&1 |grep Make|",
  "GNU Make [^0-9]*(3\.[0-9]+.*|4\..*)", #version 3.79.1, 3.81, 4.x
  "make (gnu version) is present.",
  "The program gnu make is missing or is not a good version.
We need  3.XX",
);

######################################################################
# Generate globals files (features issues)
######################################################################

######################################################################
# Diagnostic
######################################################################


if($error) {
    pr2 "
----------------------------------------------------------------------
!!!! There seems to have problem, we have found $error missing package" .
plural($error) . ".
----------------------------------------------------------------------
";
} else {

    pr2 "

----------------------------------------------------------------------

All seems fine for $project.

To compile $project type one of the following commands:
  \$ make          (bytecode version)
  \$ make opt      (native version)
  \$ make world    (both versions)

To install type:
  \$ (sudo) make install

Then, to test $project simply type:
  \$ make test

And, to use it simply type:
  \$ $projectcmdline --init    (initialize the environment for make)
  \$ make                           (execute the pattern finder to build the reports)
  \$ $projectcmdline --correl  (correlate the reports)

	At this stage, you have to edit the .correl.org files
	and re-execute the correlation process until there is
	no TODO proposition. The last version is backup in a .bk file.

	When the correlation process is over, check for false positive
	in the reports. To do so, copy and edit the .edit.org files
	into .new.org files.

Then, use one of the following commands according to the desired output format:
  \$ $projectcmdline
  \$ $projectcmdline --png
  \$ $projectcmdline --svg
  \$ $projectcmdline --web

And enjoy your time travel...

";


######################################################################
# Generating the configuration
######################################################################

pr2 "$project target prefix: $prefix (you can use --prefix to override it)";
pr2 "Generating Makefile.config";
open(CONFIG, ">Makefile.config");
print CONFIG "# autogenerated by configure

#
INSTALL_PROGRAM?=install -c -m 755
INSTALL_LIB?=    install -c -m 755
INSTALL_DATA?=   install -c -m 644

# Where to install the binary
BINDIR=$prefix/bin

# Where to install the man pages
MANDIR=$prefix/man

# Where to install the lib
LIBDIR=$prefix/lib

# Where to install the configuration files
SHAREDIR=$prefix/share/$project


PDFVIEWER?=xdg-open

# The OPTBIN variable is here to allow to use ocamlc.opt instead of
# ocaml, when it is available, which speeds up compilation. So
# if you want the fast version of the ocaml chain tools, set this var
# or setenv it to \".opt\" in your startup script.
OPTBIN=$opt
OPTFLAGS=

OCAMLYACCOPT=
#OCAMLYACCOPT=--table

";

}
